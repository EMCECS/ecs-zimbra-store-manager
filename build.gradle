/*
 * Copyright (c) 2016 EMC Corporation. All Rights Reserved.
 *
 * Licensed under the EMC Software License Agreement for Free Software (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * https://github.com/EMCECS/ecs-zimbra-store-manager/blob/master/LICENSE.txt
 */
description = "Zimbra Storage Manager plugin that writes to EMC Elastic Cloud Storage"
group = 'com.emc.ecs'
version = '1.0.0'

ext.githubProjectName = 'ecs-zimbra-store-manager'
ext.licenseName = 'EMC Software License Agreement - Free Software'
ext.licenseUrl = 'https://raw.githubusercontent.com/EMCECS/ecs-zimbra-store-manager/master/LICENSE.txt'
ext.mainClass = 'com.emc.ecs.zimbra.ext.EcsStoreExt'
ext.aggregatedDocsDir = "$buildDir/aggregatedDocs"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'distribution'
apply plugin: 'maven'

configurations {
    jars.extendsFrom(signatures)
    export // specifies additional artifacts in the root distribution
    tools // specifies tool artifacts for the root distribution (in the tools/ directory)
}

shadowJar {
    destinationDir file("${buildDir}/shadow")
    classifier ''
    manifest {
        attributes 'Zimbra-Extension-Class': project.mainClass,
            'Implementation-Version': project.version,
            'Class-Path': { configurations.runtime.collect { it.getName() }.join(' ') }
    }
}

defaultTasks 'distZip'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    jars shadowJar
    jars sourcesJar
}

repositories {
    jcenter { url 'http://jcenter.bintray.com/' }
    mavenLocal()
}

test {
    jvmArgs '-XX:-UseSplitVerifier' // required for cobertura and Java 1.7
}

dependencies {
    compile "com.emc.ecs:object-client:2.2.4"
    compileOnly "com.zimbra:zimbrastore:8.6.0_GA_1153",
        "com.zimbra:zimbracommon:8.6.0_GA_1153"
    testCompile "junit:junit:4.11",
        "org.mockito:mockito-core:1.9.5"
    testRuntime "com.zimbra:zimbraclient:8.6.0_GA_1153",
        "com.zimbra:zimbrasoap:8.6.0_GA_1153",
        "javax.mail:mail:1.4.5",
        "dom4j:dom4j:1.5.2",
        "log4j:log4j:1.2.16"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    if (project.hasProperty('java7Lib')) {
        options.fork = true
        options.bootClasspath = new File(java7Lib).listFiles(
                [accept:{d, f-> f ==~ /.*\.jar/ }] as FilenameFilter
        ).join(File.pathSeparator)
    }
}

def projectPom = {
    project {
        name project.name
        description project.description
        url 'https://community.emc.com/community/products/ecs#developer'

        scm {
            url scmUrl
            connection scmConnection
            developerConnection scmConnection
        }

        licenses {
            license {
                name licenseName
                url licenseUrl
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'EMCECS'
                name 'EMC ECS'
            }
        }
    }
}

task writePom {
    ext.pomFile = file("$buildDir/pom.xml")
    outputs.file pomFile
    doLast {
        pom(projectPom).writeTo pomFile
    }
}

jar {
    doFirst {
        manifest {
            attributes 'Implementation-Version': project.version,
                    'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
        }
    }
    into("META-INF/maven/$project.group/$project.name") {
        from writePom
    }
}

distributions {
    main {
        contents {
            from configurations.jars.artifacts.files
            from configurations.export.artifacts.files
            from { subprojects.configurations.export.artifacts.files }
            from('.') {
                include '*.txt'
            }
            into('3rd-party-licenses') {
                from '3rd-party-licenses'
            }
            into('lib') {
                from configurations.runtime
            }
        }
    }
}

clean {
    delete aggregatedDocsDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
